class Node {
    public name: String
    public kids: [Node]
    public parent: weak Node?

    public function leaf(anon name: String) throws -> Node {
        return Node(name, kids: [], parent: None)
    }

    public function parenting(anon name: String, anon kids: [Node]) throws =>
        Node(name, kids, parent: None)
}

function init_parents(anon mut tree: Node) -> void {
    for kid in tree.kids.iterator() {
        kid.parent = tree
        init_parents(kid)
    }
}

function walk(
    anon tree: &Node
    anon action: &function(node: &Node, depth: i64) -> void
    depth: i64 = 0
) {
    action(node: tree, depth)
    for kid in tree.kids.iterator() {
        walk(kid, action, depth: depth + 1)
    }
}

function print_tree(anon tree: &Node) {
    walk(tree, function(node: &Node, depth) {
        for _ in 0 .. 2 * depth {
            print(" ")
        }
        println("{}", node.name)
    })
}

function calc_total_depth(anon tree: &Node) -> i64 {
    mut total = 0
    walk(tree, function[&total](_, depth) {
        total += depth
    })
    return total
}

function process(intro: Node) throws -> Node {
    mut tree = Node::parenting("root", [
        intro,
        Node::parenting("one", [
            Node::leaf("two"),
            Node::leaf("three"),
        ]),
        Node::leaf("four"),
    ])
    init_parents(tree)
    let internal_intro = tree.kids[0]
    tree.kids.push(Node::leaf("outro"))
    println("{}", internal_intro.name)
    print_tree(tree)
    mut total_depth = 0
    for _ in 0..2 { // 00_000 {
        total_depth += calc_total_depth(tree)
    }
    println("Total depth: {}", total_depth)
    // return internal_intro;
    return tree;
}

function main() {
    let intro = Node::leaf("intro")
    // println("Hi: {}", intro)
    let tree = process(intro)
    println("{}", intro.parent!.name)
    // println("{}", tree.parent!.name)
}
